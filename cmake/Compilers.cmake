if("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang$")
    set(COMPILER_CLANG ON)
    if(CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "MSVC")
        set(COMPILER_CLANG_MSVC ON)
        set(COMPILER_MSVC_LIKE ON)
    elseif(CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL "GNU")
        set(COMPILER_CLANG_GNU ON)
    endif()
else()
    set(COMPILER_CLANG OFF)
endif()

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    set(COMPILER_GCC ON)
else()
    set(COMPILER_GCC OFF)
endif()

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    set(COMPILER_MSVC ON)
    set(COMPILER_MSVC_LIKE ON)
    set(COMPILER_CLANG_MSVC OFF)
else()
    set(COMPILER_MSVC OFF)
endif()

option(USE_TIDY "Run clang-tidy along with build")
if(USE_TIDY)
    set(CMAKE_CXX_CLANG_TIDY clang-tidy)

    option(USE_CLAZY "Enable clazy checks")
    if(USE_CLAZY)
        set(CLAZY_PLUGIN_PATH "ClazyClangTidy" CACHE STRING "Path to clazy plugin")

        get_filename_component(CLAZY_PLUGIN_REAL_PATH "${CLAZY_PLUGIN_PATH}" REALPATH)
        if(IS_DIRECTORY "${CLAZY_PLUGIN_REAL_PATH}")
            message(FATAL_ERROR "Invalid path to clazy plugin: it's a directory")
        endif()

        if(IS_ABSOLUTE "${CLAZY_PLUGIN_PATH}") # on non-Windows hosts, any path that begins with a ~ evaluates to true
            if(NOT EXISTS "${CLAZY_PLUGIN_REAL_PATH}")
                message(FATAL_ERROR "Invalid path to clazy plugin: file doesn't exist")
            endif()
            list(APPEND CMAKE_CXX_CLANG_TIDY "-load=${CLAZY_PLUGIN_REAL_PATH}")
        else()
            list(APPEND CMAKE_FIND_LIBRARY_PREFIXES "")
            find_library(CLAZY_PLUGIN
                NAMES "${CLAZY_PLUGIN_PATH}"
                PATHS /usr/local/lib)
            if(NOT CLAZY_PLUGIN)
                message(WARNING "Clazy plugin not found")
            endif()
            list(APPEND CMAKE_CXX_CLANG_TIDY "-load=${CLAZY_PLUGIN}")
        endif()
    elseif(CLAZY_PLUGIN_PATH)
        message(FATAL_ERROR "Clazy plugin can be used only when USE_CLAZY=ON")
    endif()
elseif(USE_CLAZY)
    message(FATAL_ERROR "Clazy checks can be enabled only when USE_TIDY=ON")
endif()

# TODO: clang-tidy ../src/main.cpp -load=/usr/local/lib/ClazyClangTidy.dylib

if(${COMPILER_GCC})
    add_compile_options(-fdiagnostics-color=always)

    add_compile_options(-Wall)
    add_compile_options(-Wextra)
    add_compile_options(-pedantic)
    add_compile_options(-Wshadow=local)

    add_compile_options(-Wno-unknown-pragmas)
    add_compile_options(-Wno-nonnull-compare)
    add_compile_options(-Wno-parentheses)
    add_compile_options(-fanalyzer -Wno-analyzer-use-of-uninitialized-value)
elseif(${COMPILER_CLANG})
    add_compile_options(-fcolor-diagnostics)

    add_compile_options(-Wall)
    add_compile_options(-Wextra)
    add_compile_options(-pedantic)
    add_compile_options(-Wthread-safety)
    add_compile_options(-Wshadow -Wshadow-field -Wshadow-field-in-constructor-modified -Wshadow-uncaptured-local)

    add_compile_options(-Wno-unknown-pragmas)
    add_compile_options(-Wno-logical-op-parentheses)
    add_compile_options(-Wno-language-extension-token)
    add_compile_options(-Wno-gnu-statement-expression-from-macro-expansion)
    if(${COMPILER_CLANG_MSVC})
        add_compile_options(/EHsc)
    endif()
elseif(${COMPILER_MSVC})
    cmake_host_system_information(RESULT NUMBER_OF_LOGICAL_CORES QUERY NUMBER_OF_LOGICAL_CORES)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP${NUMBER_OF_LOGICAL_CORES}")

    add_compile_options(/Wall)
    add_compile_options(/EHsc)
    add_compile_options(/analyze)
    # disable "unknown pragma" warnings
    add_compile_options(/wd4068)
    # disable "exception-filter expression is the constant EXCEPTION_EXECUTE_HANDLER" warnings
    add_compile_options(/wd6320)
endif()
